labs(
title = "Richness",
subtitle = "(0.01 threshold, experimentally validated)",
fill = "Interval"
) +
xlab("effect (centered and standardized)") +
ylab("diet") +
scale_fill_brewer(direction = -1, na.translate = FALSE) +
geom_vline(xintercept=0) +
theme_bw()
divman01.rich.model.full %>%
gather_draws(par=c(b_aridity_mean,b_elevation_range_m,b_lat_range, b_precip_seasonality_mean)) %>%
ggplot(aes(x=.value,y=.variable)) +
stat_sample_slabinterval(
aes(fill = stat(cut_cdf_qi(
cdf,
.width = c(.5, .8, .95),
labels = scales::percent_format())))) +
labs(
title = "Richness",
subtitle = "(0.01 threshold, experimentally validated)",
fill = "Interval"
) +
xlab("effect (centered and standardized)") +
ylab("climate variable") +
scale_fill_brewer(direction = -1, na.translate = FALSE) +
scale_y_discrete(labels=c("aridity", "elevation range (m)", "latitude range", "precipitation seasonality")) +
geom_vline(xintercept=0) +
theme_bw()
get_variables(divman01.rich.model.full)
divman01.rich.model.full %>%
gather_draws(par=c(bs_saridity_mean,bs_selevation_range_m,bs_slat_range, bs_sprecip_seasonality_mean)) %>%
ggplot(aes(x=.value,y=.variable)) +
stat_sample_slabinterval(
aes(fill = stat(cut_cdf_qi(
cdf,
.width = c(.5, .8, .95),
labels = scales::percent_format())))) +
labs(
title = "Richness",
subtitle = "(0.01 threshold, experimentally validated)",
fill = "Interval"
) +
xlab("effect (centered and standardized)") +
ylab("climate variable") +
scale_fill_brewer(direction = -1, na.translate = FALSE) +
scale_y_discrete(labels=c("aridity", "elevation range (m)", "latitude range", "precipitation seasonality")) +
geom_vline(xintercept=0) +
theme_bw()
get_variables(divman01.rich.model.full) %>% head
get_variables(divman01.rich.model.full) %>% head(20)
get_variables(divman01.rich.model.full)
divman01.rich.model.full %>%
gather_draws(par=c(bs_saridity_mean_1,bs_selevation_range_m_1,bs_slat_range_1, bs_sprecip_seasonality_mean_1)) %>%
ggplot(aes(x=.value,y=.variable)) +
stat_sample_slabinterval(
aes(fill = stat(cut_cdf_qi(
cdf,
.width = c(.5, .8, .95),
labels = scales::percent_format())))) +
labs(
title = "Richness",
subtitle = "(0.01 threshold, experimentally validated)",
fill = "Interval"
) +
xlab("effect (centered and standardized)") +
ylab("climate variable") +
scale_fill_brewer(direction = -1, na.translate = FALSE) +
scale_y_discrete(labels=c("aridity", "elevation range (m)", "latitude range", "precipitation seasonality")) +
geom_vline(xintercept=0) +
theme_bw()
divman01.rich.model.full %>%
gather_draws(par=c(sds_saridity_mean_1,sds_selevation_range_m_1,sds_slat_range_1, sds_sprecip_seasonality_mean_1)) %>%
ggplot(aes(x=.value,y=.variable)) +
stat_sample_slabinterval(
aes(fill = stat(cut_cdf_qi(
cdf,
.width = c(.5, .8, .95),
labels = scales::percent_format())))) +
labs(
title = "Richness",
subtitle = "(0.01 threshold, experimentally validated)",
fill = "Interval"
) +
xlab("effect (centered and standardized)") +
ylab("climate variable") +
scale_fill_brewer(direction = -1, na.translate = FALSE) +
scale_y_discrete(labels=c("aridity", "elevation range (m)", "latitude range", "precipitation seasonality")) +
geom_vline(xintercept=0) +
theme_bw()
# plotting - estimates and posteriors
# effects
conditional_effects(divman01.rich.model.full)[[1]] %>%
ggplot(aes(x=log(species_overlap_all_count), y=estimate__)) +
geom_line() +
xlab("Log species overlap") + ylab("VIP family richness") +
geom_ribbon(aes(ymax=upper__, ymin=lower__), alpha=.3)
# regression tables
mcmcTab(divman01.rich.model.full, Pr = TRUE)
mcmcReg(divman01.rich.model.full, pars=c('b_.*','bs_.*', 'sds_.*'),regex=TRUE)
divman01.rich.model.full %>% spread_draws(mu[i])
divman01.rich.model.full
divman01.rich.model.full %>% spread_draws(mu)
get_variables(divman01.rich.model.full)
divman01.rich.model.full %>% gather_draws(s_sspecies_overlap_by_order_count_1[i]) %>% mean_qi()
get_variables(divman01.rich.model.full) %>% head
datplot<-divman01.rich.model.full %>% gather_draws(s_sspecies_overlap_by_order_count_1[i]) %>% mean_qi()
dataplot$overlap<-data$species_overlap_by_order_count
datplot$overlap<-data$species_overlap_by_order_count
datplot
plot(divman01.rich.model.full)
library(ggplot2)
library(tidyverse)
decodeMap<-read.table("/home/lauterbur/Documents/dl_sweeps/tests/sex-averaged-decode.rmap",
header = TRUE)
decodeMap
testMap<-read.table("/home/lauterbur/Documents/dl_sweeps/tests/recombp05_neutral.map",
header=TRUE)
testMap
# percent of "hotspots" (>1cM/Mb)?
mean(decodeMap$stdrate) # avg rate, 0.96 (should be ~1)
median(decodeMap$stdrate) # 0.011
mean(decodeMap$stdrate[which(decodeMap$stdrate<mean(decodeMap$stdrate))]) # avg baseline, 0.13
mean(decodeMap$stdrate[which(decodeMap$stdrate>mean(decodeMap$stdrate))]) # avg hotspot, 3.9
median(decodeMap$stdrate[which(decodeMap$stdrate>mean(decodeMap$stdrate))]) # avg hotspot, 2.4
sum(decodeMap$stdrate>mean(decodeMap$stdrate))/length(decodeMap$stdrate)*100 # percent hotspots, 22
mean(testMap$rate.cM.Mb.) # 1.3
mean(testMap$rate.cM.Mb.[which(testMap$rate.cM.Mb.<mean(testMap$rate.cM.Mb.))]) # 0.006
mean(testMap$rate.cM.Mb.[which(testMap$rate.cM.Mb.<mean(testMap$rate.cM.Mb.))]) # 0.006
median(testMap$rate.cM.Mb.) # 0.0057, 0.0116
mean(testMap$rate.cM.Mb.[which(testMap$rate.cM.Mb.>mean(testMap$rate.cM.Mb.))]) # 21
median(testMap$rate.cM.Mb.[which(testMap$rate.cM.Mb.>mean(testMap$rate.cM.Mb.))]) # 11
sum(testMap$rate.cM.Mb.>mean(testMap$rate.cM.Mb.))/length(testMap$rate.cM.Mb.)*100 # 6.5
# original p05, new p05 (RHONEW =~ 0.1)
mean(testMap$rate.cM.Mb.[which(testMap$rate.cM.Mb.<10)]) # avg baseline, 0.18
mean(testMap$rate.cM.Mb.[which(testMap$rate.cM.Mb.>10)]) # avg hotspot, 34
# original p05, new p05 (RHONEW =~ 0.1)
mean(testMap$rate.cM.Mb.[which(testMap$rate.cM.Mb.<1)]) # avg baseline, 0.18, 0.13
mean(testMap$rate.cM.Mb.[which(testMap$rate.cM.Mb.>1)]) # avg hotspot, 34
median(testMap$rate.cM.Mb.[which(testMap$rate.cM.Mb.>1)]) # avg hotspot, 31
sum(testMap$rate.cM.Mb.>1)/length(testMap$rate.cM.Mb.)*100 # percent hotspots, 3.5
decodeMap %>%
ggplot() +
geom_density(aes(stdrate)) +
geom_density(aes(rate.cM.Mb.), color="red", data=testMap) +
# geom_density(aes(rate), color="blue", data=distMap1) +
theme_bw() +
xlim(0,20)
decodeMap %>%
ggplot() +
geom_density(aes(stdrate)) +
geom_density(aes(rate.cM.Mb.), color="red", data=testMap) +
# geom_density(aes(rate), color="blue", data=distMap1) +
theme_bw()
decodeMap %>%
filter(
stdrate>10) %>%
ggplot() +
geom_density(aes(stdrate)) +
geom_density(aes(rate.cM.Mb.), color="red", data=testMap %>% filter(rate.cM.Mb.>1)) +
# geom_density(aes(rate), color="blue", data=distMap1 %>% filter(rate>10)) +
theme_bw()
decodeMap %>%
filter(
stdrate>10) %>%
ggplot() +
geom_density(aes(stdrate)) +
geom_density(aes(rate.cM.Mb.*10), color="red", data=testMap %>% filter(rate.cM.Mb.>1)) +
# geom_density(aes(rate), color="blue", data=distMap1 %>% filter(rate>10)) +
theme_bw()
testMap<-read.table("/home/lauterbur/Documents/dl_sweeps/tests/recombp015_neutral.map",
header=TRUE)
testMap
# original p05, new p05 (RHONEW =~ 0.1), new p015 (RHONEW =~0.1)
mean(testMap$rate.cM.Mb.) # 1.3, 0.13
median(testMap$rate.cM.Mb.) # 0.0057, 0.00038
mean(testMap$rate.cM.Mb.[which(testMap$rate.cM.Mb.<mean(testMap$rate.cM.Mb.))]) # 0.006, 0.0116
mean(testMap$rate.cM.Mb.[which(testMap$rate.cM.Mb.>mean(testMap$rate.cM.Mb.))]) # 21, 0.89
median(testMap$rate.cM.Mb.[which(testMap$rate.cM.Mb.>mean(testMap$rate.cM.Mb.))]) # 11, 0.43
sum(testMap$rate.cM.Mb.>mean(testMap$rate.cM.Mb.))/length(testMap$rate.cM.Mb.)*100 # 6.5, 13
# original p05, new p05 (RHONEW =~ 0.1), new p015 (RHONEW =~0.1)
mean(testMap$rate.cM.Mb.[which(testMap$rate.cM.Mb.<1)]) # avg baseline, 0.18, 0.04
mean(testMap$rate.cM.Mb.[which(testMap$rate.cM.Mb.>1)]) # avg hotspot, 34, 1.7
median(testMap$rate.cM.Mb.[which(testMap$rate.cM.Mb.>1)]) # avg hotspot, 31, 1.7
sum(testMap$rate.cM.Mb.>1)/length(testMap$rate.cM.Mb.)*100 # percent hotspots, 3.5, 5.5
decodeMap %>%
filter(
stdrate>10) %>%
ggplot() +
geom_density(aes(stdrate)) +
geom_density(aes(rate.cM.Mb.*10), color="red", data=testMap %>% filter(rate.cM.Mb.>1)) +
# geom_density(aes(rate), color="blue", data=distMap1 %>% filter(rate>10)) +
theme_bw()
decodeMap %>%
ggplot() +
geom_density(aes(stdrate)) +
geom_density(aes(rate.cM.Mb.), color="red", data=testMap) +
# geom_density(aes(rate), color="blue", data=distMap1) +
theme_bw()
## make a tree of all of the species currently in the codebase
library(phytools)
getwd()
setwd("Documents/Manuscripts/adding-species-manuscript/")
tree<-read.tree("./species.nwk")
plot(tree)
library(ggtree)
ggtree(tree)
species<-tree$tip.label
species
library(tidyverse)
species<-tibble(species=tree$tip.label)
species
species<-tibble(species=tree$tip.label) %>%
mutate(original=ifelse(species %in% c("Homo sapiens", "Drosophila melanogaster", "Arabidopsis thaliana", "Pongo abelii","Canis familiaris", "Escherichia coli")))
species<-tibble(species=tree$tip.label) %>%
mutate(original=ifelse(species %in% c("Homo sapiens", "Drosophila melanogaster", "Arabidopsis thaliana",
"Pongo abelii", "Canis familiaris", "Escherichia coli"), "original", "new"))
species
species<-tibble(species=tree$tip.label) %>%
mutate(original=ifelse(gsub("_", " ", species) %in% c("Homo sapiens", "Drosophila melanogaster", "Arabidopsis thaliana",
"Pongo abelii", "Canis familiaris", "Escherichia coli"), "original", "new"))
species
help(ggtree)
ggtree(tree) + geom_tiplab()
ggtree(tree) + aes(color=original) +
geom_tiplab()
ggtree(tree) + aes(color=species$original) +
geom_tiplab()
ggtree(tree) + aes(color=species$original[[1]]) +
geom_tiplab()
species$original[[1]]
species$original
ggtree(tree) + aes(color=species$original) +
geom_tiplab()
tree.tibble<-as.tibble(tree)
tree.tibble<-as_tibble(tree)
tree.tibble
treedata<-full_join(tree.tibble,species, by=c(label=species))
treedata<-full_join(tree.tibble,species, by=c("label"="species"))
treedata
treedata<-as.treedata(full_join(tree.tibble,species, by=c("label"="species")))
??as.treedata
library(tidytree)
treedata<-as.treedata(full_join(tree.tibble,species, by=c("label"="species")))
treedata
ggtree(treedata$tree) + aes(color=data$original) +
geom_tiplab()
treedata@phylo
treedata@data
treedata@data$original
ggtree(treedata@phylo) + aes(color=data$original) +
geom_tiplab()
ggtree(treedata@phylo, aes(color=data$original)) +
geom_tiplab()
ggtree(treedata@phylo, aes(color=.@data$original)) +
geom_tiplab()
ggtree(tree) %<% data
str(tree)
ggtree(tree) %<+% data
ggtree(tree) %<+% data.frame(data)
ggtree(tree) %<+% species
ggtree(tree) %<+% species +
geom_tiplab()
ggtree(tree, aes(color=original)) %<+% species +
geom_tiplab() +
ggtree(tree, aes(color=original)) %<+% species +
geom_tiplab()
ggtree(tree) %<+% species +
geom_tiplab(aes(color=original)) +
ggtree(tree) %<+% species +
geom_tiplab(aes(color=original))
ggtree(tree) %<+% species +
geom_tiplab(aes(color=original), offset=1)
ggtree(tree) %<+% species +
geom_tiplab(aes(color=original), offset=-1)
ggtree(tree) %<+% species +
geom_tiplab(aes(color=original))
ggsave("./species_fig.png")
getwd()
setwd("/home/lauterbur/Documents/Manuscripts/adding-species-manuscript/figs/")
ggsave("./species_fig.png")
ggtree(tree) %<+% species +
geom_tiplab(aes(color=original)) +
ggplot2::xlim(0, 0.06)
ggtree(tree) %<+% species +
geom_tiplab(aes(color=original)) +
ggplot2::xlim(0, 6)
ggtree(tree) %<+% species +
geom_tiplab(aes(color=original)) +
ggplot2::xlim(0, 60)
ggtree(tree) %<+% species +
geom_tiplab(aes(color=original))
ggtree(tree) %<+% species +
geom_tiplab(aes(color=original))+
ggplot2::xlim(0, 0.006)
ggtree(tree) %<+% species +
geom_tiplab(aes(color=original))+
ggplot2::xlim(0, 6000)
ggtree(tree) %<+% species +
geom_tiplab(aes(color=original))+
ggplot2::xlim(0, 6000) +
scale_color_manual(c("darkblue","darkorange"))
ggtree(tree) %<+% species +
geom_tiplab(aes(color=original))+
ggplot2::xlim(0, 6000) +
scale_color_manual(values=c("darkblue","darkorange"))
ggtree(tree) %<+% species +
geom_tiplab(aes(color=original))+
ggplot2::xlim(0, 6000) +
scale_color_manual(values=c("sienna4","darkblue"))
ggtree(tree) %<+% species +
geom_tiplab(aes(color=original))+
ggplot2::xlim(0, 6000) +
scale_color_manual(values=c("darkorange3","darkblue"))
# compare basic stats
library(tidyverse)
setwd("/home/lauterbur/Documents/dl_sweeps/tests/stats/")
read_stats<-function(filename) {
read.csv(filename) %>%
t() %>%
as_tibble() %>%
rename(neutral=V1,sweep=V2) %>%
filter(row_number() != 1, row_number() != n()) %>%
mutate(stat=str_split(filename,"_")[[1]][3],
sim=str_split(str_split(filename,"_")[[1]][[2]],"/")[[1]][5],
neutral=as.numeric(neutral),
sweep=as.numeric(sweep))
}
files<-list.files(path="/home/lauterbur/Documents/dl_sweeps/tests/stats",pattern="*plots.csv", full.names=TRUE, recursive = TRUE)
data<-files %>%
map_df(~read_stats(.))
data
data %>%
filter(sim %in% c("backp000133","backp03","recombp015","recombp05","withold1")) %>%
pivot_longer(cols=c("neutral","sweep"), names_to="type") %>%
ggplot() +
geom_boxplot(aes(x=type,y=value,fill=sim)) +
facet_grid(rows=vars(stat),
scales="free")
data %>%
filter(sim %in% c("backp000133","backp03","recombp015","recombp05","withold1")) %>%
pivot_longer(cols=c("neutral","sweep"), names_to="type") %>%
ggplot() +
geom_boxplot(aes(x=sim,y=value,fill=type)) +
facet_grid(rows=vars(stat),
scales="free")
# plot ROCs
library(tidyverse)
library(ggplot2)
library(yardstick)
library(viridis)
library(scatterpie)
library(ggforce)
library(ggrepel)
library(RColorBrewer)
library(ggh4x)
setwd("/home/lauterbur/Documents/dl_sweeps/tests/")
read_preds<-function(flnm) {
print(flnm)
read_tsv(flnm) %>%
mutate(filename = flnm) %>%
mutate(traindata=str_split(str_split(filename,"/")[[1]][8],"_")[[1]][2],
model=str_split(str_split(filename,"/")[[1]][8],"_")[[1]][4],
norm=str_split(basename(filename),"_")[[1]][5],
activation=str_split(basename(filename),"_")[[1]][6],
optimizer=str_split(basename(filename),"_")[[1]][7],
cdr=str_split(basename(filename),"_")[[1]][8],
amsgrad=str_split(basename(filename),"_")[[1]][9],
monitor=str_split(basename(filename),"_")[[1]][10],
learning_rate=str_split(basename(filename),"_")[[1]][11],
alpha=str_split(basename(filename),"_")[[1]][12],
batch_norm=str_split(basename(filename),"_")[[1]][13],
batch_size=str_split(basename(filename),"_")[[1]][14],
conv_dropout=str_split(basename(filename),"_")[[1]][15],
dense_dropout=str_split(basename(filename),"_")[[1]][16],
epsilon=str_split(basename(filename),"_")[[1]][17],
initialization=str_split(basename(filename),"_")[[1]][18],
momentum=str_split(basename(filename),"_")[[1]][19],
nesterov=str_split(basename(filename),"_")[[1]][20],
regularization=str_split(str_split(basename(filename),"_")[[1]][21],"[.]")[[1]][1],
type=str_split(str_split(basename(filename),"_")[[1]][21],"[.]")[[1]][2],
testdata=str_split(str_split(basename(filename),"_")[[1]][21],"[.]")[[1]][3]) %>%
mutate_if(is.character,factor)
}
# pred_data<-list.files(path="/home/lauterbur/Documents/dl_sweeps/tests/predictions",pattern=".preds",full.names=TRUE) %>%
#   map_df(~read_preds(.))
pred_rate_auc_data_withold1<-readRDS("/home/lauterbur/Documents/dl_sweeps/tests/predictions/round_two_RDS_newwithold/rate_auc_traindata_withold1.RDS")
library(tidyverse)
library(ggplot2)
library(viridis)
library(BBmisc)
library(gtable)
# visualize feature vectors as heat maps
setwd("/home/lauterbur/Documents/dl_sweeps/tests/feature_vectors/")
# load fv data ---------------------------------------------------------------
read_fv<- function(filename) {
read_csv(filename)  %>%
mutate(data=str_split(filename,"/")[[1]][9],
type=str_split(str_split(filename,"/")[[1]][10],"_")[[1]][1],
train_test=str_split(filename,"/")[[1]][8])
}
fvs<-list.files(path="/home/lauterbur/Documents/dl_sweeps/tests/feature_vectors/",pattern="*.fv",recursive=TRUE,full.names=TRUE) %>%
map_df(~read_fv(.))
fv_data<-fvs %>% filter(data %in% c("withold1", "backp03", "backp000133"))
chr_reg<-colnames(fv_data[,4:(length(colnames(fv_data))-6)]) %>% sub(".*_w","w",.) %>% unique() %>% factor()
centers<-chr_reg[seq(3,length(chr_reg),5)]
fv_plot<-fv_data %>%
#  filter((SEL>0.0044 & SEL<0.0051) | is.na(SEL), (TIME>1180 & TIME < 1510) | is.na(TIME), EAF>0.99 | is.na(EAF), SAF < 0.035 | is.na(SAF),
#         THETA < 800 & THETA > 400, RHO<600, RHO>300) %>%
select(colnames(fv_data[,4:(length(colnames(fv_data))-4)])) %>%
group_by(type,data) %>%
summarise_if(is.numeric,mean) %>%
pivot_longer(cols=!c("type","data"),names_to=c("statistic","chromosome_region"),
names_pattern="(.*)_(w.*_c.*)") %>%
mutate(
statistic=factor(statistic, levels=rev(c("ihs","iSAFE","nsl","DIND","hDo","hDs","hf","lf","S","HAF","H12"))),
chromosome_region=factor(chromosome_region, levels=chr_reg)
) %>%
filter(statistic!="HAF") %>%
ggplot(aes(x=chromosome_region, y=statistic)) +
#  geom_tile(aes(fill=log(value))) +
geom_tile(aes(fill=value)) +
geom_vline(xintercept=seq(5.5,105.5,5),color="white") +
theme_bw() +
scale_fill_viridis(option="E",
begin=0.1) +
scale_x_discrete(
labels=seq(500,700,10),
breaks=centers
) +
theme(axis.ticks=element_line(size=.4),
axis.text.x=element_text(angle=45,vjust=.5,size=7),
legend.title.align = 0.5,
axis.title.x=element_text(vjust=-.1)) +
labs(x="chromosome region (kb)",
fill="standardized\nstatistic\nvalue") +
facet_wrap(~ type + data, nrow=2)
fv_plot
ggtree(tree) %<+% species +
geom_tiplab(aes(color=original))+
ggplot2::xlim(0, 6000) +
scale_color_manual(values=c("darkorange3","darkblue"))
ggtree(tree) %<+% species +
geom_tiplab(aes(color=original), fontface='bold')+
ggplot2::xlim(0, 6000) +
scale_color_manual(values=c("darkorange3","darkblue"))
ggtree(tree, size=10) %<+% species +
geom_tiplab(aes(color=original), fontface='bold')+
ggplot2::xlim(0, 6000) +
scale_color_manual(values=c("darkorange3","darkblue"))
ggtree(tree, size=2) %<+% species +
geom_tiplab(aes(color=original), fontface='bold')+
ggplot2::xlim(0, 6000) +
scale_color_manual(values=c("darkorange3","darkblue"))
ggtree(tree, size=2) %<+% species +
geom_tiplab(aes(color=original), fontface='bold', hjust=.5)+
ggplot2::xlim(0, 6000) +
scale_color_manual(values=c("darkorange3","darkblue"))
ggtree(tree, size=2) %<+% species +
geom_tiplab(aes(color=original), fontface='bold', hjust=-.05)+
ggplot2::xlim(0, 6000) +
scale_color_manual(values=c("darkorange3","darkblue"))
ggtree(tree, size=2) %<+% species +
geom_tiplab(aes(color=original), fontface='bold', hjust=-.1)+
ggplot2::xlim(0, 6000) +
scale_color_manual(values=c("darkorange3","darkblue"))
ggtree(tree, size=2) %<+% species +
geom_tiplab(aes(color=original), fontface='bold', hjust=-.08)+
ggplot2::xlim(0, 6000) +
scale_color_manual(values=c("darkorange3","darkblue"))
ggtree(tree, size=2) %<+% species +
geom_tiplab(aes(color=original), fontface='bold', hjust=-.08)+
ggplot2::xlim(0, 6000) +
scale_color_manual(values=c("darkorange3","darkblue")) +
theme(legend=element_blank())
ggtree(tree, size=2) %<+% species +
geom_tiplab(aes(color=original), fontface='bold', hjust=-.08)+
ggplot2::xlim(0, 6000) +
scale_color_manual(values=c("darkorange3","darkblue")) +
theme(legend.position = "none")
ggsave("./species_fig.png")
getwd()
setwd("/home/lauterbur/Documents/Manuscripts/adding-species-manuscript/figs/)
setwd("/home/lauterbur/Documents/Manuscripts/adding-species-manuscript/figs/")
ggsave("./species_fig.png")
species<-tibble(species=tree$tip.label) %>%
mutate(species = gsub("_", " ", species),
original=ifelse(species %in% c("Homo sapiens", "Drosophila melanogaster", "Arabidopsis thaliana",
"Pongo abelii", "Canis familiaris", "Escherichia coli"), "original", "new"))
ggtree(tree, size=2) %<+% species +
geom_tiplab(aes(color=original), fontface='bold', hjust=-.08)+
ggplot2::xlim(0, 6000) +
scale_color_manual(values=c("darkorange3","darkblue")) +
theme(legend.position = "none")
species
tree
tree$tip.label<-gsub("_"," ",tree$tip.label)
species<-tibble(species=tree$tip.label) %>%
mutate(species = gsub("_", " ", species),
original=ifelse(species %in% c("Homo sapiens", "Drosophila melanogaster", "Arabidopsis thaliana",
"Pongo abelii", "Canis familiaris", "Escherichia coli"), "original", "new"))
ggtree(tree, size=2) %<+% species +
geom_tiplab(aes(color=original), fontface='bold', hjust=-.08)+
ggplot2::xlim(0, 6000) +
scale_color_manual(values=c("darkorange3","darkblue")) +
theme(legend.position = "none")
ggtree(tree, size=2) %<+% species +
geom_tiplab(aes(color=original), fontface='bold.italic', hjust=-.08)+
ggplot2::xlim(0, 6000) +
scale_color_manual(values=c("darkorange3","darkblue")) +
theme(legend.position = "none")
ggsave("./species_fig.png")
